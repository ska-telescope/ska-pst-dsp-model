function reshaped = reshape_low_cbf_data(data, n_dim, n_pol, n_chan, verbose_)
  % Research DADA data, given one-dimensional data from a DADA file
  %
  % Args:
  %   data: The DADA file's file id as generated by `fopen`
  %   verbose_ (bool): Optional. Verbosity flag. Defaults to false.
  % Returns:
  %   cell: cell array containing the data and header.

  verbose = 0;
  if exist('verbose_', 'var')
    verbose = verbose_;
  end

  % fprintf ('reshape_low_cbf_data nchan=%d npol=%d ndim=%d\n', n_chan, n_pol, n_dim);

  % size(data)
  data = reshape(data, 1, []);
  % size(data)

  if n_dim == 2
      % fprintf('reshape_low_cbf_data converting to complex\n')
      data = data(1:2:end) + 1j*data(2:2:end);
  end

  sz = size(data);
  ndat = sz(2);
  nsamp_per_heap = 32;
  
  % ndim already absorbed in above conversion to complex
  ndat_per_heap = nsamp_per_heap * n_pol * n_chan;

  if mod(ndat, ndat_per_heap) ~= 0
      fprintf('reshape_low_cbf_data input data block is not an integer number of heaps\n');
  end

  nheap = fix(ndat/ndat_per_heap);
  nsamp = nheap * nsamp_per_heap;

  reshaped = complex(zeros(n_pol, n_chan, nsamp));

  for n=1:nheap
      heap = data((1:ndat_per_heap)+(n-1)*ndat_per_heap);
      % packets are in FPT order
      tmp = reshape(heap, [], n_pol, n_chan);
      sz = size(tmp);
      assert (sz(1) == nsamp_per_heap);
      tmp = permute(tmp,[2 3 1]);
      reshaped(:,:,(1:nsamp_per_heap)+(n-1)*nsamp_per_heap) = tmp(:,:,:);
  end

end
